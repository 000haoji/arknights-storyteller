#!/usr/bin/env node

/**
 * 版本号自动同步脚本
 * 
 * 功能：从 package.json 读取版本号，自动同步到所有相关配置文件
 * 使用：npm run sync-version
 * 
 * 同步的文件：
 * - src-tauri/Cargo.toml
 * - src-tauri/tauri.conf.json
 * - src-tauri/gen/android/app/tauri.properties
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// 获取当前文件的目录（ESM 中的 __dirname 替代）
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// 颜色输出
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  red: '\x1b[31m',
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// 计算 Android versionCode
function calculateVersionCode(version) {
  const parts = version.split('.').map(Number);
  if (parts.length !== 3 || parts.some(isNaN)) {
    throw new Error(`无效的版本号格式: ${version}，应该是 x.y.z 格式`);
  }
  const [major, minor, patch] = parts;
  return major * 10000 + minor * 100 + patch;
}

// 读取 package.json 获取版本号
function getVersionFromPackageJson() {
  const packageJsonPath = path.join(__dirname, '../package.json');
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
  return packageJson.version;
}

// 更新 Cargo.toml
function updateCargoToml(version) {
  const cargoPath = path.join(__dirname, '../src-tauri/Cargo.toml');
  let content = fs.readFileSync(cargoPath, 'utf8');
  
  const newContent = content.replace(
    /^version = ".*"$/m,
    `version = "${version}"`
  );
  
  if (content !== newContent) {
    fs.writeFileSync(cargoPath, newContent, 'utf8');
    log(`✅ 已更新 Cargo.toml -> ${version}`, 'green');
    return true;
  }
  log(`⏭️  Cargo.toml 版本已是最新 (${version})`, 'yellow');
  return false;
}

// 更新 tauri.conf.json
function updateTauriConfig(version, versionCode) {
  const configPath = path.join(__dirname, '../src-tauri/tauri.conf.json');
  const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
  
  let updated = false;
  
  if (config.version !== version) {
    config.version = version;
    updated = true;
  }
  
  if (!config.bundle) {
    config.bundle = {};
  }
  if (!config.bundle.android) {
    config.bundle.android = {};
  }
  
  if (config.bundle.android.versionCode !== versionCode) {
    config.bundle.android.versionCode = versionCode;
    updated = true;
  }
  
  if (updated) {
    fs.writeFileSync(configPath, JSON.stringify(config, null, 2) + '\n', 'utf8');
    log(`✅ 已更新 tauri.conf.json -> ${version} (versionCode: ${versionCode})`, 'green');
    return true;
  }
  
  log(`⏭️  tauri.conf.json 版本已是最新 (${version}, versionCode: ${versionCode})`, 'yellow');
  return false;
}

// 更新 tauri.properties
function updateTauriProperties(version, versionCode) {
  const propertiesPath = path.join(__dirname, '../src-tauri/gen/android/app/tauri.properties');
  
  // 确保目录存在
  const dir = path.dirname(propertiesPath);
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
  
  const content = `// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
tauri.android.versionName=${version}
tauri.android.versionCode=${versionCode}`;
  
  // 检查文件是否存在且内容是否相同
  if (fs.existsSync(propertiesPath)) {
    const existingContent = fs.readFileSync(propertiesPath, 'utf8');
    if (existingContent.trim() === content.trim()) {
      log(`⏭️  tauri.properties 版本已是最新 (${version}, versionCode: ${versionCode})`, 'yellow');
      return false;
    }
  }
  
  fs.writeFileSync(propertiesPath, content, 'utf8');
  log(`✅ 已更新 tauri.properties -> ${version} (versionCode: ${versionCode})`, 'green');
  return true;
}

// 主函数
function main() {
  try {
    log('\n🔄 开始同步版本号...', 'blue');
    log('━'.repeat(60), 'blue');
    
    // 1. 获取版本号
    const version = getVersionFromPackageJson();
    log(`\n📦 从 package.json 读取版本: ${version}`, 'blue');
    
    // 2. 计算 versionCode
    const versionCode = calculateVersionCode(version);
    log(`🔢 计算 Android versionCode: ${versionCode}`, 'blue');
    
    // 3. 更新各个文件
    log('\n📝 更新配置文件:', 'blue');
    const updates = [
      updateCargoToml(version),
      updateTauriConfig(version, versionCode),
      updateTauriProperties(version, versionCode),
    ];
    
    // 4. 总结
    log('\n' + '━'.repeat(60), 'blue');
    const updatedCount = updates.filter(Boolean).length;
    if (updatedCount > 0) {
      log(`\n✨ 完成! 已更新 ${updatedCount} 个文件`, 'green');
      log('\n📋 版本信息:', 'blue');
      log(`   版本号: ${version}`, 'blue');
      log(`   versionCode: ${versionCode}`, 'blue');
    } else {
      log('\n✨ 所有文件版本号已是最新，无需更新', 'green');
    }
    log('');
    
  } catch (error) {
    log(`\n❌ 错误: ${error.message}`, 'red');
    process.exit(1);
  }
}

// 运行
main();

