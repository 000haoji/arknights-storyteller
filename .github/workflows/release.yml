name: release-android

on:
  workflow_dispatch:
  push:
    branches:
      - release

env:
  CARGO_TERM_COLOR: always

jobs:
  check-android-secrets:
    name: Check Android signing secrets
    runs-on: ubuntu-24.04
    outputs:
      has_keystore: ${{ steps.check.outputs.has_keystore }}
    steps:
      - id: check
        run: |
          if [ -n "$ANDROID_KEYSTORE_B64" ]; then
            echo "has_keystore=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_keystore=false" >> "$GITHUB_OUTPUT"
          fi
        env:
          ANDROID_KEYSTORE_B64: ${{ secrets.ANDROID_KEYSTORE_B64 }}

  android:
    name: Build signed Android APK
    needs: check-android-secrets
    if: needs.check-android-secrets.outputs.has_keystore == 'true'
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm
          cache-dependency-path: arknights-story-reader/package-lock.json

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Android SDK
        run: |
          # Android SDK is pre-installed on ubuntu runners
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
          echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
          echo "$ANDROID_HOME/build-tools/34.0.0" >> $GITHUB_PATH
          
          # Accept licenses
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
          
          # Install required packages
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
            "platforms;android-34" \
            "build-tools;34.0.0" \
            "ndk;26.1.10909125"
          
          # Set NDK_HOME after NDK installation
          echo "NDK_HOME=$ANDROID_HOME/ndk/26.1.10909125" >> $GITHUB_ENV

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: arknights-story-reader/src-tauri -> target

      - name: Install frontend dependencies
        run: npm ci
        working-directory: arknights-story-reader

      - name: Bump version and get app version
        id: get_version
        run: |
          # Read current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Bump patch version
          NEW_VERSION=$(node -e "
            const current = '$CURRENT_VERSION';
            const parts = current.split('.');
            parts[2] = String(parseInt(parts[2]) + 1);
            console.log(parts.join('.'));
          ")
          echo "New version: $NEW_VERSION"
          
          # Update package.json
          npm version $NEW_VERSION --no-git-tag-version
          
          # Update tauri.conf.json
          node -e "
            const fs = require('fs');
            const path = 'src-tauri/tauri.conf.json';
            const config = JSON.parse(fs.readFileSync(path, 'utf8'));
            config.version = '$NEW_VERSION';
            fs.writeFileSync(path, JSON.stringify(config, null, 2) + '\n');
          "
          
          # Update Cargo.toml
          sed -i.bak "s/^version = \".*\"/version = \"$NEW_VERSION\"/" src-tauri/Cargo.toml
          rm -f src-tauri/Cargo.toml.bak
          
          echo "version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
        working-directory: arknights-story-reader

      - name: Commit version bump
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          cd arknights-story-reader
          git add package.json package-lock.json src-tauri/tauri.conf.json src-tauri/Cargo.toml
          [ -f src-tauri/Cargo.lock ] && git add src-tauri/Cargo.lock || true
          cd ..
          git diff --staged --quiet || git commit -m "chore: bump version to ${{ steps.get_version.outputs.version }}"
          git push origin release || echo "Failed to push version bump"

      - name: Create GitHub Release
        id: create_release
        env:
          GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          VERSION: "${{ steps.get_version.outputs.version }}"
        run: |
          TAG="app-v${VERSION}"
          RELEASE_NAME="明日方舟剧情阅读器 v${VERSION}"
          
          # Check if release already exists
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release $TAG already exists"
            echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          else
            echo "Creating new release $TAG"
            gh release create "$TAG" \
              --title "$RELEASE_NAME" \
              --notes "自动构建版本。Android APK 安装包。" \
              --draft \
              --latest
            echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          fi

      - name: Restore Android keystore
        env:
          ANDROID_KEYSTORE_B64: "${{ secrets.ANDROID_KEYSTORE_B64 }}"
          ANDROID_KEYSTORE_PASSWORD: "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}"
          ANDROID_KEY_ALIAS: "${{ secrets.ANDROID_KEY_ALIAS }}"
          ANDROID_KEY_PASSWORD: "${{ secrets.ANDROID_KEY_PASSWORD }}"
        run: |
          mkdir -p src-tauri/gen/android
          echo "$ANDROID_KEYSTORE_B64" | base64 --decode > src-tauri/gen/android/upload-keystore.jks
          KEY_PASSWORD="${ANDROID_KEY_PASSWORD:-$ANDROID_KEYSTORE_PASSWORD}"
          cat > src-tauri/gen/android/keystore.properties <<EOF
          storePassword=${ANDROID_KEYSTORE_PASSWORD}
          keyPassword=${KEY_PASSWORD}
          keyAlias=${ANDROID_KEY_ALIAS}
          storeFile=${GITHUB_WORKSPACE}/arknights-story-reader/src-tauri/gen/android/upload-keystore.jks
          EOF
        working-directory: arknights-story-reader

      - name: Build signed Android APK
        env:
          ANDROID_KEYSTORE_PATH: "${{ github.workspace }}/arknights-story-reader/src-tauri/gen/android/upload-keystore.jks"
          ANDROID_KEY_ALIAS: "${{ secrets.ANDROID_KEY_ALIAS }}"
          ANDROID_KEYSTORE_PASSWORD: "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}"
          ANDROID_KEY_PASSWORD: "${{ secrets.ANDROID_KEY_PASSWORD }}"
          VITE_ANDROID_UPDATE_FEED: "https://github.com/${{ github.repository }}/releases/latest/download/android-latest.json"
        run: bash scripts/build-apk.sh
        working-directory: arknights-story-reader

      - name: Upload APK to release
        env:
          GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          VERSION: "${{ steps.get_version.outputs.version }}"
          TAG: "${{ steps.create_release.outputs.tag }}"
        run: |
          APK_PATH="src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release-signed.apk"
          if [ ! -f "$APK_PATH" ]; then
            echo "Signed APK not found at $APK_PATH" >&2
            exit 1
          fi
          RELEASE_NAME="arknights-story-reader-android-${VERSION}.apk"
          gh release upload "$TAG" "$APK_PATH#$RELEASE_NAME" --clobber
        working-directory: arknights-story-reader

      - name: Publish Android update manifest
        env:
          GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          VERSION: "${{ steps.get_version.outputs.version }}"
          TAG: "${{ steps.create_release.outputs.tag }}"
          REPO: "${{ github.repository }}"
        run: |
          APK_NAME="arknights-story-reader-android-${VERSION}.apk"
          JSON_PATH="android-latest.json"
          printf '{\n  "version": "%s",\n  "notes": "",\n  "url": "https://github.com/%s/releases/download/%s/%s",\n  "fileName": "%s"\n}\n' \
            "$VERSION" "$REPO" "$TAG" "$APK_NAME" "$APK_NAME" > "$JSON_PATH"
          gh release upload "$TAG" "$JSON_PATH#$JSON_PATH" --clobber
        working-directory: arknights-story-reader

      - name: Publish release
        env:
          GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          TAG: "${{ steps.create_release.outputs.tag }}"
        run: |
          echo "Publishing release $TAG"
          gh release edit "$TAG" --draft=false
        working-directory: arknights-story-reader

      - name: Cleanup keystore
        if: always()
        run: rm -f src-tauri/gen/android/upload-keystore.jks src-tauri/gen/android/keystore.properties
        working-directory: arknights-story-reader
